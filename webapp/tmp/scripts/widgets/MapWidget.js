// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define(['base/RoomrWidget', 'base/renderTemplate'], function(RoomrWidget, renderTemplate) {
    'use strict';

    var MapWidget;
    return MapWidget = (function(_super) {

      __extends(MapWidget, _super);

      MapWidget.prototype.nidus = void 0;

      MapWidget.prototype.gmap = void 0;

      MapWidget.prototype.currentLat = void 0;

      MapWidget.prototype.currentLong = void 0;

      function MapWidget() {
        var _this = this;
        MapWidget.__super__.constructor.call(this, 'map');
        this.searchResults = [];
        this.subscribeToEvent('searchResultsChanged', function(params) {
          return _this.searchResultsChanged(params);
        });
        this.subscribeToEvent('drawRoute', function(params) {
          return _this.drawRoute(params);
        });
      }

      MapWidget.prototype.renderInto = function(element) {
        var _this = this;
        this.nidus = $(element);
        return this.renderTemplate({}, function(html) {
          _this.nidus.html(html);
          return _this.loadGoogle();
        });
      };

      MapWidget.prototype.loadGoogle = function() {
        window.roomr = window.roomr || {};
        window.roomr.roomrMapWidgetDrawCallback = this.loadGmaps.bind(this);
        if (window.roomr.isGoogleMapJSLoaded) {
          this.createMap(this.currentLat, this.currentLong);
          return this.drawSearchResults();
        } else {
          return $.getScript('http://maps.google.com/maps/api/js?sensor=false&callback=roomr.roomrMapWidgetDrawCallback');
        }
      };

      MapWidget.prototype.loadGmaps = function() {
        window.roomr.isGoogleMapJSLoaded = true;
        return $.getScript('scripts/gmaps.js', this.renderMap.bind(this)).fail(function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return console.log(args);
        });
      };

      MapWidget.prototype.renderMap = function() {
        var _this = this;
        return $(document).ready(function() {
          _this.createMap('48.139126', '11.580186');
          return _this.drawSearchResults();
        });
      };

      MapWidget.prototype.createMap = function(latitude, longitude) {
        this.currentLat = latitude;
        this.currentLong = longitude;
        this.gmap = new GMaps({
          div: '#SearchResultMap',
          lat: latitude,
          lng: longitude,
          zoom: 13,
          height: '400px'
        });
        return this.addMarker4CurrentPosition();
      };

      MapWidget.prototype.addMarker4CurrentPosition = function() {
        var marker;
        marker = this.gmap.createMarker({
          lat: this.currentLat,
          lng: this.currentLong,
          title: 'aktueller Standort'
        });
        marker.setMap(this.gmap.map);
        marker.setIcon('src/style/img/home.png');
        return this.gmap.markers.push(marker);
      };

      MapWidget.prototype.addMarker = function(latitude, longitude, markertitle, number, infoContent) {
        var iconUrl;
        iconUrl = 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=' + number + '|85A4BD|000000';
        return this.gmap.addMarker({
          lat: latitude,
          lng: longitude,
          title: markertitle,
          icon: iconUrl,
          infoWindow: {
            content: infoContent
          }
        });
      };

      MapWidget.prototype.drawRoute = function(routeId) {
        var address, entry, lat, long, new_position, searchResult, _i, _len, _ref,
          _this = this;
        searchResult = null;
        _ref = this.searchResults;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entry = _ref[_i];
          if (entry.roomOffer.flatshare.id === routeId) {
            searchResult = entry;
          }
        }
        if (searchResult === null) {
          return;
        }
        lat = searchResult.roomOffer.flatshare.geoLocation.latitude;
        long = searchResult.roomOffer.flatshare.geoLocation.longitude;
        this.cleanRoute();
        address = searchResult.roomOffer.flatshare.address.street + ' ' + searchResult.roomOffer.flatshare.address.streetNumber + ', ' + searchResult.roomOffer.flatshare.address.city;
        $('#routeToTarget').html(address);
        $('#routeTo').show();
        new_position = $('#SearchResultMap').offset();
        $('html,body').animate({
          scrollTop: new_position.top
        }, 1000);
        return this.gmap.travelRoute({
          origin: [this.currentLat, this.currentLong],
          destination: [lat, long],
          travelMode: 'walking',
          step: function(e) {
            return $('#instructions').delay(1000).fadeIn(200, function() {
              $('#instructions').append('<li>' + e.instructions + '</li>');
              _this.gmap.setCenter(e.end_location.lat(), e.end_location.lng());
              return _this.gmap.drawPolyline({
                path: e.path,
                strokeColor: '#131540',
                strokeOpacity: 0.6,
                strokeWeight: 6
              });
            });
          }
        });
      };

      MapWidget.prototype.searchResultsChanged = function(searchResults) {
        this.searchResults = searchResults;
        this.cleanRoute();
        this.gmap.removeMarkers();
        this.addMarker4CurrentPosition();
        return this.drawSearchResults();
      };

      MapWidget.prototype.cleanRoute = function() {
        $('#instructions > *').remove();
        this.gmap.cleanRoute();
        return $('#routeTo').hide();
      };

      MapWidget.prototype.drawSearchResults = function() {
        var city, lat, long, number, searchResult, street, title, _i, _len, _ref, _results;
        number = 1;
        if (this.searchResults.length < 1) {
          return;
        }
        _ref = this.searchResults;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          searchResult = _ref[_i];
          lat = searchResult.roomOffer.flatshare.geoLocation.latitude;
          long = searchResult.roomOffer.flatshare.geoLocation.longitude;
          street = searchResult.roomOffer.flatshare.address.street + ' ' + searchResult.roomOffer.flatshare.address.streetNumber;
          city = searchResult.roomOffer.flatshare.address.city;
          title = street + ', ' + city;
          this.addMarker(lat, long, title, number, '<p>Straße: ' + street + '<br/>\
          Ort:' + city + '<br/>Miete: ' + searchResult.roomOffer.roomDetails.totalRentPerMonthInEuro + ' €<br/>\
          Zimmergröße: ' + searchResult.roomOffer.roomDetails.roomSize.squareMeters + ' m²</p>');
          _results.push(number++);
        }
        return _results;
      };

      return MapWidget;

    })(RoomrWidget);
  });

}).call(this);
